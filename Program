import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns, joblib, os
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

try:
    import xgboost as xgb
    xgbok = True
except:
    xgbok = False

path = '/content/WA_Fn-UseC_-Marketing-Customer-Value-Analysis.csv'
df = pd.read_csv(path)

if 'Effective To Date' in df.columns:
    df['Effective To Date'] = pd.to_datetime(df['Effective To Date'], errors='coerce')
df = df.replace(['########','#########','#####','NA','N/A','null'], np.nan)

tcol = None
for n in ['Customer Lifetime Value','Customer_Lifetime_Value','CLV','Lifetime Value','CustomerLifetimeValue']:
    if n in df.columns: tcol = n; break
if not tcol: raise ValueError('No target column')

df = df.dropna(subset=[tcol])
num = df.select_dtypes(include=['int64','float64']).columns.tolist()
cat = df.select_dtypes(include=['object','category','bool']).columns.tolist()
if tcol in num: num.remove(tcol)
ids = [c for c in df.columns if c.lower().startswith('customer') and c!=tcol]
for c in ids:
    if c in num: num.remove(c)
    if c in cat: cat.remove(c)

if 'Total Claim Amount' in df.columns and 'Number of Policies' in df.columns:
    df['aov'] = df['Total Claim Amount'] / df['Number of Policies'].replace(0, np.nan)
    df['aov'] = df['aov'].fillna(0)
    num.append('aov')
if 'Months Since Policy Inception' in df.columns and 'Months Since Policy Inception' not in num:
    num.append('Months Since Policy Inception')
if 'Months Since Last Claim' in df.columns: num.append('Months Since Last Claim')
if 'Monthly Premium Auto' in df.columns: num.append('Monthly Premium Auto')
num = list(dict.fromkeys(num))
cat = sorted([c for c in cat if df[c].nunique()<=20][:12], key=lambda c: df[c].nunique())

numtr = Pipeline([('imp', SimpleImputer(strategy='median')),('sc', StandardScaler())])
cattr = Pipeline([('imp', SimpleImputer(strategy='most_frequent')),('oh', OneHotEncoder(handle_unknown='ignore', sparse_output=False))])
prep = ColumnTransformer([('num', numtr, num), ('cat', cattr, cat)], remainder='drop')

X = df[num + cat].copy()
y = df[tcol].astype(float)
Xtr, Xte, ytr, yte = train_test_split(X, y, test_size=0.2, random_state=42)

rf = Pipeline([('prep', prep), ('reg', RandomForestRegressor(random_state=42, n_jobs=-1))])
rfgrid = {'reg__n_estimators':[100,200], 'reg__max_depth':[None,10,20], 'reg__min_samples_leaf':[1,4]}
rfs = GridSearchCV(rf, rfgrid, cv=3, scoring='neg_mean_absolute_error', n_jobs=-1, verbose=1)
rfs.fit(Xtr, ytr)
rfb = rfs.best_estimator_
pred = rfb.predict(Xte)
mae = mean_absolute_error(yte, pred)
rmse = np.sqrt(mean_squared_error(yte, pred))
r2 = r2_score(yte, pred)
print(f'RF MAE:{mae:.3f} RMSE:{rmse:.3f} R2:{r2:.3f}')

best = rfb
bestn = 'RF'
bestm = mae

if xgbok:
    xg = xgb.XGBRegressor(objective='reg:squarederror', n_jobs=-1, random_state=42)
    xgp = Pipeline([('prep', prep), ('reg', xg)])
    xggrid = {'reg__n_estimators':[100,200], 'reg__learning_rate':[0.05,0.1], 'reg__max_depth':[3,6]}
    xgs = GridSearchCV(xgp, xggrid, cv=3, scoring='neg_mean_absolute_error', n_jobs=-1, verbose=1)
    xgs.fit(Xtr, ytr)
    xgbb = xgs.best_estimator_
    xpred = xgbb.predict(Xte)
    xmae = mean_absolute_error(yte, xpred)
    xrmse = np.sqrt(mean_squared_error(yte, xpred))
    xr2 = r2_score(yte, xpred)
    print(f'XGB MAE:{xmae:.3f} RMSE:{xrmse:.3f} R2:{xr2:.3f}')
    if xmae < bestm: best, bestn, bestm = xgbb, 'XGB', xmae

os.makedirs('models', exist_ok=True)
joblib.dump(best, 'models/bestclv.joblib')

fullx = df[num + cat].copy()
preds = best.predict(fullx)
out = df.copy()
out['PredCLV'] = preds
os.makedirs('outputs', exist_ok=True)
out.to_csv('outputs/clvpred.csv', index=False)

q1, q2 = np.quantile(preds, [0.33, 0.66])
def seg(x): return 'Low' if x<=q1 else 'Medium' if x<=q2 else 'High'
out['Seg'] = out['PredCLV'].apply(seg)
out.to_csv('outputs/clvseg.csv', index=False)

plt.figure(figsize=(8,4))
plt.hist(out['PredCLV'], bins=40)
plt.title('Predicted CLV')
plt.tight_layout()
plt.savefig('outputs/clvhist.png')
plt.close()

plt.figure(figsize=(8,4))
sns.boxplot(x=out['Seg'], y=out['PredCLV'])
plt.title('CLV Segments')
plt.tight_layout()
plt.savefig('outputs/clvsegplot.png')
plt.close()
print('Done')
